% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/findInFiles.R
\name{findInFiles}
\alias{findInFiles}
\alias{fif}
\alias{fifR}
\title{Find pattern in files}
\usage{
findInFiles(
  ext,
  pattern,
  depth = NULL,
  maxCountPerFile = NULL,
  maxCount = NULL,
  wholeWord = FALSE,
  ignoreCase = FALSE,
  perl = FALSE,
  excludePattern = NULL,
  excludeFoldersPattern = NULL,
  root = ".",
  output = "viewer"
)

fif(
  ext,
  pattern,
  depth = NULL,
  maxCountPerFile = NULL,
  maxCount = NULL,
  wholeWord = FALSE,
  ignoreCase = FALSE,
  perl = FALSE,
  excludePattern = NULL,
  excludeFoldersPattern = NULL,
  root = ".",
  output = "viewer"
)

fifR(...)
}
\arguments{
\item{ext}{file extension, e.g. \code{"R"} or \code{"js"}}

\item{pattern}{pattern to search for, a regular expression, e.g.
\code{"function"} or \code{"^function"}}

\item{depth}{depth of the search, \code{NULL} or a negative number for an
entire recursive search (subdirectories, subdirectories of subdirectories,
etc.), otherwise a positive integer: \code{0} to search in the root
directory only, \code{1} to search in the root directory and its
subdirectories, etc.}

\item{maxCountPerFile}{maximum number of results per file, \code{NULL} for
an unlimited number, otherwise a positive integer; when an integer
\code{m} is supplied, \code{grep} stops to search in each file after it
finds \code{m} results}

\item{maxCount}{maximum number of results, \code{NULL} for an unlimited
number, otherwise a positive integer; supplying an integer \code{m} just
truncates the output, it does not stop \code{grep} after \code{m} results
are found (so there is no gain of efficiency)}

\item{wholeWord}{logical, whether to match the whole pattern}

\item{ignoreCase}{logical, whether to ignore the case}

\item{perl}{logical, whether \code{pattern} is a Perl regular expression}

\item{excludePattern}{a pattern or a vector of patterns; files and folders
whose name matches this pattern or one of these patterns will be excluded
from search}

\item{excludeFoldersPattern}{a pattern or a vector of patterns; folders
whose name matches this pattern or one of these patterns will be excluded
from search}

\item{root}{path to the root directory to search from}

\item{output}{one of \code{"viewer"}, \code{"tibble"} or
\code{"viewer+tibble"}; see examples}

\item{...}{arguments other than \code{ext} passed to \code{findInFiles}}
}
\value{
A tibble if \code{output="tibble"}, otherwise a
  \code{htmlwidget} object.
}
\description{
Find a pattern in some files. The functions \code{findInFiles}
  and \code{fif} are the same, and \code{fifR(...)} is the same as
  \code{findInFiles(ext = "R", ...)}.
}
\examples{
library(findInFiles)
folder <- system.file("example", package = "findInFiles")
findInFiles("R", "function", root = folder)

findInFiles("R", "function", root = folder, output = "tibble")

fif <- findInFiles("R", "function", root = folder, output = "viewer+tibble")
FIF2tibble(fif)
FIF2dataframe(fif)
fif

folder <- system.file("www", "shared", package = "shiny")
findInFiles("css", "outline", excludePattern = "*.min.css", root = folder)
}
